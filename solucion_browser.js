// SOLUCI√ìN INMEDIATA: Ejecutar en la consola del navegador
// Copia y pega este c√≥digo en la consola del navegador cuando tu aplicaci√≥n est√© cargada

console.log('üîß === SOLUCIONANDO FOREIGN KEY CONSTRAINT ===');

// Funci√≥n para solucionar el problema
const solucionarConstraint = async () => {
  try {
    // Importar supabase desde tu aplicaci√≥n
    const { supabase } = await import('./src/lib/supabase.js');
    
    console.log('1Ô∏è‚É£ Verificando organizaciones existentes...');
    
    // Verificar organizaciones existentes
    const { data: orgs, error: orgError } = await supabase
      .from('org')
      .select('id, nombre');
    
    if (orgError) {
      console.error('‚ùå Error consultando organizaciones:', orgError.message);
      console.log('üí° Posibles causas:');
      console.log('   - No tienes permisos para leer la tabla org');
      console.log('   - La tabla org no existe');
      console.log('   - Problemas de autenticaci√≥n');
      return false;
    }
    
    console.log(`‚úÖ Organizaciones encontradas: ${orgs?.length || 0}`);
    orgs?.forEach(org => console.log(`   - ${org.id}: ${org.nombre}`));
    
    // Verificar si existe la organizaci√≥n por defecto
    const DEFAULT_ORG_ID = '550e8400-e29b-41d4-a716-446655440000';
    const defaultOrgExists = orgs?.some(org => org.id === DEFAULT_ORG_ID);
    
    console.log('2Ô∏è‚É£ Verificando organizaci√≥n por defecto...');
    
    if (defaultOrgExists) {
      console.log('‚úÖ La organizaci√≥n por defecto ya existe');
    } else {
      console.log('‚ö†Ô∏è La organizaci√≥n por defecto no existe. Cre√°ndola...');
      
      const { data: newOrg, error: createError } = await supabase
        .from('org')
        .insert({
          id: DEFAULT_ORG_ID,
          nombre: 'Organizaci√≥n Principal'
        })
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå Error creando organizaci√≥n:', createError.message);
        console.log('üí° Esto podr√≠a ser porque:');
        console.log('   - No tienes permisos de escritura en la tabla org');
        console.log('   - Ya existe pero con datos diferentes');
        console.log('   - Problemas de autenticaci√≥n');
        return false;
      }
      
      console.log('‚úÖ Organizaci√≥n por defecto creada:', newOrg);
    }
    
    console.log('3Ô∏è‚É£ Verificando tu sesi√≥n actual...');
    
    // Verificar sesi√≥n actual
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Error obteniendo sesi√≥n:', sessionError.message);
      return false;
    }
    
    if (!session?.user) {
      console.log('‚ö†Ô∏è No hay sesi√≥n activa');
      return false;
    }
    
    console.log('‚úÖ Usuario autenticado:', session.user.email);
    
    console.log('4Ô∏è‚É£ Verificando tu rol y organizaci√≥n...');
    
    // Verificar rol del usuario
    const { data: userRole, error: roleError } = await supabase
      .from('user_role')
      .select('org_id, role')
      .eq('user_id', session.user.id)
      .single();
    
    if (roleError) {
      console.error('‚ö†Ô∏è Error obteniendo rol:', roleError.message);
      console.log('üí° Esto significa que tu usuario no tiene rol asignado');
      console.log('üí° Creando rol por defecto...');
      
      // Crear rol por defecto para el usuario
      const { data: newRole, error: createRoleError } = await supabase
        .from('user_role')
        .insert({
          user_id: session.user.id,
          org_id: DEFAULT_ORG_ID,
          role: 'admin',
          is_active: true
        })
        .select()
        .single();
      
      if (createRoleError) {
        console.error('‚ùå Error creando rol:', createRoleError.message);
        return false;
      }
      
      console.log('‚úÖ Rol creado para el usuario:', newRole);
    } else {
      console.log('‚úÖ Usuario tiene rol:', userRole);
      
      // Verificar si el org_id del usuario es v√°lido
      const userOrgExists = orgs?.some(org => org.id === userRole.org_id);
      if (!userOrgExists) {
        console.log('‚ö†Ô∏è El org_id del usuario no es v√°lido, actualizando...');
        
        const { error: updateRoleError } = await supabase
          .from('user_role')
          .update({ org_id: DEFAULT_ORG_ID })
          .eq('user_id', session.user.id);
        
        if (updateRoleError) {
          console.error('‚ùå Error actualizando rol:', updateRoleError.message);
          return false;
        }
        
        console.log('‚úÖ Rol actualizado con org_id v√°lido');
      }
    }
    
    console.log('5Ô∏è‚É£ Probando crear un cliente...');
    
    // Probar crear un cliente
    const testClient = {
      nombre: 'Cliente de Prueba - ' + new Date().toLocaleTimeString(),
      org_id: DEFAULT_ORG_ID,
      tipo_id: null,
      idnum: null,
      correo: null
    };
    
    const { data: newClient, error: clientError } = await supabase
      .from('cliente')
      .insert(testClient)
      .select()
      .single();
    
    if (clientError) {
      console.error('‚ùå A√∫n hay error creando cliente:', clientError.message);
      console.log('üí° Error espec√≠fico:', clientError);
      return false;
    }
    
    console.log('‚úÖ Cliente de prueba creado exitosamente:', newClient);
    
    // Limpiar - eliminar cliente de prueba
    const { error: deleteError } = await supabase
      .from('cliente')
      .delete()
      .eq('id', newClient.id);
    
    if (!deleteError) {
      console.log('üßπ Cliente de prueba eliminado');
    }
    
    console.log('üéâ === PROBLEMA SOLUCIONADO ===');
    console.log('‚úÖ Ahora puedes crear clientes sin problemas');
    console.log('‚úÖ Tu usuario tiene rol y organizaci√≥n asignados');
    console.log('‚úÖ La organizaci√≥n por defecto existe');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error inesperado:', error);
    return false;
  }
};

// Ejecutar la soluci√≥n
solucionarConstraint()
  .then(success => {
    if (success) {
      console.log('\nüéØ LISTO! El problema ha sido solucionado.');
      console.log('Recarga la p√°gina e intenta crear un cliente nuevamente.');
    } else {
      console.log('\n‚ùå No se pudo solucionar autom√°ticamente.');
      console.log('üí° Intenta ejecutar el SQL manualmente en Supabase:');
      console.log(`
-- Ejecutar en el SQL Editor de Supabase:
INSERT INTO org (id, nombre, created_at) 
VALUES (
  '550e8400-e29b-41d4-a716-446655440000',
  'Organizaci√≥n Principal',
  NOW()
) 
ON CONFLICT (id) DO NOTHING;
      `);
    }
  });
